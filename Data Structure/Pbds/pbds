#include<bits/stdc++.h>
using namespace std;
typedef long long int ll;
#define endl "\n"
#define pb push_back
#define rep(i,n) for (int i = 0; i < (n); ++i)
#define all(v) (v).begin(),(v).end()
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
template <typename T> using ordered_set = tree<T, null_type, less_equal<T>, rb_tree_tag, tree_order_statistics_node_update>;
// *s.find_by_order(index), s.order_of_key(value)
// erase -> s.erase(s.upper_bound(value));
int32_t main()
{
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    ll n,s,t;
    cin>>n>>s>>t;
    vector<ll>v(n);
    ordered_set<ll>oset;
    int left[n],right[n];
    
    for(int i=0;i<n;i++)
    {
        cin>>v[i];
        left[i] = oset.size()-oset.order_of_key(v[i]+1);
        oset.insert(v[i]);
    }
    oset.clear();
    for(int i=n-1;i>=0;i--)
    {
        right[i]=oset.order_of_key(v[i]);
        oset.insert(v[i]);
    }
    // for(auto &u:left)cout<<u<<" ";
    // cout<<endl;
    // for(auto &u:right)cout<<u<<" ";
    // cout<<endl;
    ll cnt[n];
    for(int i=0;i<n;i++)cnt[i]=0;
    for(int i=0;i<n;i++)
    {
        if(left[i]>=s && right[i]>=t)cnt[i]++;
    }
    // for(auto &u:cnt)cout<<u<<" ";
    // cout<<endl;
    ll pref[n];
    for(int i=0;i<n;i++)pref[i]=0;
    pref[0]=cnt[0];
    for(int i=1;i<n;i++)
    {
        pref[i]= pref[i-1] + cnt[i];

    }
    // for(auto &u:pref)cout<<u<<" ";
    // cout<<endl;

    ll q;
    cin>>q;
    while(q--)
    {
        ll l,r;
        cin>>l>>r;
        l--;
        r--;
        if(l==0)cout<<pref[r]<<endl;
        else cout<<pref[r]-pref[l-1]<<endl;
    }


}
